#   Code developed by: g5fighter

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QAction, QMenu, QSystemTrayIcon

# Not autogenerated imports
import win32api, win32con, win32process, win32gui
from pycaw.pycaw import AudioUtilities
from PyQt5.QtCore import QTimer
import os.path
import json
import subprocess

# Global variables
spotifyPath = ""            # Spotify path
processpid_list = []        # All spotify processes
processpid = -1             # Spotify process pid
actual_song = ""            # Spotify Song being reproduced
is_muting = False           # Mute state of app
open_onStart = False        # Open Spotify on start muting (it will not work for Spotify installed via Windows Store)
hide_onStart = False        # Hide window on start muting to tray
ui = ""                     # UI element
datafilename = ".data"      # Filename of user data
hownd = ""                  # Window handle
isSpotifyMuted = False      # Updates de mute state of Spotify
isHided = False


def resource_path(relative_path):
    """
    Returns the absolute path of a resource file.

    Args:
        relative_path (str): The relative path of the resource file.

    Returns:
        str: The absolute path of the resource file.
    """
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def getSpotifyData():
    """
    Retrieves Spotify data by enumerating all running processes and finding the process with the name "spotify.exe".
    
    Returns:
        bool: True if Spotify process is found, False otherwise.
    """
    processes = win32process.EnumProcesses() 
    for pid in processes:
        try:
            handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, False, pid)
            exe = win32process.GetModuleFileNameEx(handle, 0)
            if "spotify.exe" in exe.lower():
                global spotifyPath
                spotifyPath = exe
                global processpid_list
                processpid_list.append(pid)
                global processpid
                processpid = pid
        except:
            pass
    return len(processpid_list)!=0

def getWindowNameByHwnd(hwnd):
    """
    Retrieves the name of the window associated with the given window handle (hwnd).

    Args:
        hwnd (int): The window handle.

    Returns:
        str: The name of the window, or None if the window is not visible or has no text.

    """
    if win32gui.IsWindowVisible(hwnd):
        window_text = win32gui.GetWindowText(hwnd)
        if window_text == None or window_text == "":
            return
        global actual_song
        actual_song = window_text

def winEnumHandler(hwnd, ctx):
    """
    Callback function used for enumerating windows.

    Parameters:
    - hwnd (int): The handle to the window being enumerated.
    - ctx (object): The context object passed to the enumeration function.

    Returns:
    None
    """
    if win32gui.IsWindowVisible(hwnd):
        process_pid_temp = win32process.GetWindowThreadProcessId(hwnd)[1]
        if(process_pid_temp in processpid_list):
            window_text = win32gui.GetWindowText(hwnd)
            if window_text == None or window_text == "":
                return
            global actual_song
            actual_song = window_text
            global hownd # no setear si existe
            hownd = hwnd
            global processpid
            processpid = process_pid_temp
            return

def getWindowName():
    """
    Retrieves the name of the active window.

    Returns:
        str: The name of the active window.
    """
    if hownd == "":
        win32gui.EnumWindows(winEnumHandler, None)

    getWindowNameByHwnd(hownd)

def isAdvertisement(song_name):
    """
    Checks if a given song name is an advertisement.

    Parameters:
    song_name (str): The name of the song.

    Returns:
    bool: True if the song is an advertisement, False otherwise.
    """
    return "Advertisement" in song_name or "Spotify" in song_name or (not (" - " in song_name))

def mute_app():
    """
    Mutes or unmutes the application based on the current song being played.

    If the application is currently muting, it checks if the current song is an advertisement.
    If it is an advertisement, the application is set to mute (volume = 1).
    If it is not an advertisement, the application is set to unmute (volume = 0).
    """
    if is_muting:
        getWindowName()
        if not isHided:
            ui.update_song(actual_song)
        if isAdvertisement(actual_song):
            setMute(1)
        else:
            setMute(0)

def setMute(state):
    """
    Sets the mute state of Spotify based on the given state.

    Parameters:
    state (int): The desired mute state. 1 for mute, 0 for unmute.

    Returns:
    None
    """
    global isSpotifyMuted
    if (state == 1) or (state == 0 and isSpotifyMuted): # and not isSpotifyMuted
        sessions = AudioUtilities.GetAllSessions()
        for session in sessions:
            process = session.Process
            if process!=None:
                if "spotify.exe" in session.Process.name().lower():
                    volume = session.SimpleAudioVolume
                    volume.SetMute(state, None)
                    isSpotifyMuted = state==1

def initialConf():
    """
    Loads initial configuration from a file if it exists, otherwise creates a new configuration file.
    The configuration includes Spotify path, open on start setting, and hide on start setting.
    """
    if os.path.isfile(datafilename):
        with open(datafilename) as f:
            data = json.load(f)
        global spotifyPath
        spotifyPath = data['SpotifyPath']
        global open_onStart
        open_onStart = bool(data['OpenStart'])
        global hide_onStart
        hide_onStart = bool(data['HideStart'])
    else:
        data = {}
        data['SpotifyPath'] = spotifyPath
        data['OpenStart'] = open_onStart
        data['HideStart'] = hide_onStart
        with open(datafilename, 'w') as outfile:
            json.dump(data, outfile, indent=2)
    ui.update_checkBox()

def writeInJson(tag, value):
    """
    Writes a value to a JSON file at the specified tag.

    Args:
        tag (str): The tag/key in the JSON file where the value will be written.
        value (any): The value to be written.

    Returns:
        None
    """
    with open(datafilename, 'r+') as f:
        data = json.load(f)
        data[tag] = value
        f.seek(0)
        json.dump(data, f, indent=2)
        f.truncate()

# Auto-generated Class but with some modifications
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(416, 193)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(416, 193))
        MainWindow.setMaximumSize(QtCore.QSize(416, 193))
        MainWindow.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(resource_path("iconadmuted.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off) #edited to recognize icon with PyInstaller
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(-1, -1, 449, 171))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout.setObjectName("verticalLayout")
        self.TExt = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TExt.sizePolicy().hasHeightForWidth())
        self.TExt.setSizePolicy(sizePolicy)
        self.TExt.setMinimumSize(QtCore.QSize(0, 20))
        self.TExt.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.TExt.setFont(font)
        self.TExt.setAutoFillBackground(False)
        self.TExt.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.TExt.setObjectName("TExt")
        self.verticalLayout.addWidget(self.TExt)
        self.MuteButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MuteButton.sizePolicy().hasHeightForWidth())
        self.MuteButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.MuteButton.setFont(font)
        self.MuteButton.setObjectName("MuteButton")
        self.verticalLayout.addWidget(self.MuteButton)
        self.OpenSpotifyCheck = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.OpenSpotifyCheck.setFont(font)
        self.OpenSpotifyCheck.setObjectName("OpenSpotifyCheck")
        self.verticalLayout.addWidget(self.OpenSpotifyCheck)
        self.HideAppCheck = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.HideAppCheck.setFont(font)
        self.HideAppCheck.setObjectName("HideAppCheck")
        self.verticalLayout.addWidget(self.HideAppCheck)
        self.PlayingNowLabel = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PlayingNowLabel.sizePolicy().hasHeightForWidth())
        self.PlayingNowLabel.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PlayingNowLabel.setFont(font)
        self.PlayingNowLabel.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.PlayingNowLabel.setObjectName("PlayingNowLabel")
        self.verticalLayout.addWidget(self.PlayingNowLabel)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setEnabled(True)
        self.statusbar.setToolTip("")
        self.statusbar.setStatusTip("")
        self.statusbar.setAccessibleName("")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AdMuted - An spotify ad silencer"))
        self.TExt.setText(_translate("MainWindow", "Start enjoying and no more adSuffering"))
        self.MuteButton.setText(_translate("MainWindow", "Start Muting"))
        self.OpenSpotifyCheck.setText(_translate("MainWindow", "Open Spotify on Start Muting"))
        self.HideAppCheck.setText(_translate("MainWindow", "Hide app on Start Muting"))
        self.PlayingNowLabel.setText(_translate("MainWindow", "Playing now:"))

        # g5fighter: Custom listeners
        self.MuteButton.clicked.connect(self.muteButton)
        self.OpenSpotifyCheck.clicked.connect(self.open_at_start)
        self.HideAppCheck.clicked.connect(self.hide_at_start)

    ##### g5fighter: Custom functions for the UI

    def open_at_start(self):
        """
        Toggles the 'open_onStart' flag and writes the updated value to a JSON file.
        """
        global open_onStart
        open_onStart = not open_onStart
        writeInJson('OpenStart', open_onStart)

    def hide_at_start(self):
        """
        Toggles the hide_onStart flag and writes its value to a JSON file.
        """
        global hide_onStart
        hide_onStart = not hide_onStart
        writeInJson('HideStart', hide_onStart)

    def showWindow(self):
        """
        Show the main window and hide the system tray icon.
        """
        MainWindow.show()   
        self.tray.hide()  
        global isHided
        isHided = False

    def convertInTray(self):
        """
        Converts the main window into a system tray icon.

        This function hides the main window, creates a system tray icon, and sets up a menu for the tray icon.
        The menu includes options to return to the main window and quit the application.

        Parameters:
        - None

        Returns:
        - None
        """
        MainWindow.hide()
        global isHided
        isHided = True

        # Create the tray
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(QtGui.QIcon(resource_path("iconadmuted.png")))
        self.tray.show()

        # Create the menu
        self.menu = QMenu()

        self.action1 = QAction("Return")
        self.action1.triggered.connect(self.showWindow)
        self.menu.addAction(self.action1)

        self.quit = QAction("Quit")
        self.quit.triggered.connect(app.quit)
        self.menu.addAction(self.quit)
        ##
        self.tray.setContextMenu(self.menu)
 
    def muteButton(self):
        """
        Toggles the mute button functionality.

        If the application is not currently muting, it checks if Spotify is running and opens it if necessary.
        If Spotify is already running, it toggles the muting state.
        If the application is currently muting, it stops muting and updates the button text accordingly.

        If the 'hide_onStart' flag is set, it converts the application into a system tray icon.

        Returns:
            None
        """
        global is_muting
        if not is_muting:
            if processpid == -1:
                if open_onStart:
                    try:
                        subprocess.call([spotifyPath])
                        getSpotifyData()
                        is_muting = not is_muting
                        self.MuteButton.setText("Is Muting")
                    except:
                        self.update_song("[Error]: Cannot open Spotify please do it manually")
                        return
                else:
                    self.PlayingNowLabel.setText("[Error]: Spotify is not running, open it and try again")
            else:
                is_muting = not is_muting
                self.MuteButton.setText("Is Muting")
            if hide_onStart:
                self.convertInTray()
        else:
            is_muting = False
            self.MuteButton.setText("Start Muting")
            ui.update_song("")

    def update_checkBox(self):
        """
        Updates the state of the checkboxes based on the values of `open_onStart` and `hide_onStart`.
        """
        self.OpenSpotifyCheck.setChecked(open_onStart)
        self.HideAppCheck.setChecked(hide_onStart)

    def update_song(self, song):
        """
        Updates the playing song label with the given song.

        Parameters:
        - song: The song to be displayed in the label.

        Returns:
        - None
        """
        self.PlayingNowLabel.setText("Playing now: "+song)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ## START: Custom functions ##
    getSpotifyData()
    initialConf()
    timer = QTimer()
    timer.timeout.connect(mute_app)
    timer.start(1000)
    ## END: Custom functions ##
    sys.exit(app.exec_())
